#Использовать cmdline
#Использовать 1commands
#Использовать logos
#Использовать v8runner
#Использовать progbar
#Использовать ReadParams
#Использовать "./Lib/deployka_m/src"

#Использовать "."

Перем _ПараметрыРаботы;
Перем _Лог;
Перем _Замер;
Перем _УправлениеСеансами;
Перем _Конфигуратор;

// Получить имя лога продукта
//
// Возвращаемое значение:
//  Строка   - имя лога продукта
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.app.Deploy";
КонецФункции

Процедура ВыполнитьБекап()
	
	Если Не _ПараметрыРаботы.ВыполнятьБекап() Тогда
		_Лог.Отладка( "Бекап пропущен. ВыполнятьБекап = Ложь" );
		Возврат;
	КонецЕсли;

	_Замер.НачатьЗамер( "Начат бекап", "Бекап" );
	
	выполнениеБекапа = Новый РаботаСSQL();
	
	выполнениеБекапа.ИнициализироватьЛог( _Лог.Уровень(), _Замер.ПолучитьПотомка() );

	выполнениеБекапа.УстановитьСервер(       _ПараметрыРаботы.Параметры["SQL.Server"] );
	выполнениеБекапа.УстановитьПользователя( _ПараметрыРаботы.Параметры["SQL.User"] );
	выполнениеБекапа.УстановитьПароль(       _ПараметрыРаботы.Параметры["SQL.Password"] );
	выполнениеБекапа.УстановитьИмяБазы(      _ПараметрыРаботы.Параметры["SQL.Base"] );
	
	результат = выполнениеБекапа.ВыполнитьБекап( _ПараметрыРаботы.Параметры["FileBackup"] );
	
	Если Не результат Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	_Замер.СообщитьЗамер( "Выполнен бекап");

КонецПроцедуры

Процедура ПерезапуститьСервер()
	
	Если Не _ПараметрыРаботы.РебутатьСервер1С() Тогда
		_Лог.Отладка( "Ребут сервера 1С пропущен. РебутатьСервер1С = Ложь" );
		Возврат;
	КонецЕсли;

	имяСервиса1С = _ПараметрыРаботы.Параметры["Server1C.ServiceName"];
	имяСервисаRAS = _ПараметрыРаботы.Параметры["Server1C.ServiceRASName"];

	Если Не ЗначениеЗаполнено( имяСервиса1С ) Тогда
		_Лог.Отладка( "Ребут сервера 1С пропущен. Имя сервиса 1С не указано" );
		Возврат;
	КонецЕсли;

	_Замер.НачатьЗамер( "Начало ребута сервера 1С", "РебутСервера1С" );

	строкаЗапуска = "sc stop """ + имяСервиса1С + """";

	ВыполнитьКомандуСВыводомИнформации( строкаЗапуска, "Остановка серера 1С" );

	Если ЗначениеЗаполнено( имяСервисаRAS ) Тогда
		
		строкаЗапуска = "sc stop """ + имяСервисаRAS + """";
		
		ВыполнитьКомандуСВыводомИнформации( строкаЗапуска, "Остановка RAS" );
		
	КонецЕсли;

	Приостановить(10000);
	
	_Лог.Информация( "Принудительное завершение процессов" );

	ВыполнитьКомандуСВыводомИнформации( "taskkill /f /im ""rphost.exe""" );
	ВыполнитьКомандуСВыводомИнформации( "taskkill /f /im ""rmngr.exe""" );
	ВыполнитьКомандуСВыводомИнформации( "taskkill /f /im ""ragent.exe""" );

	Если ЗначениеЗаполнено( имяСервисаRAS ) Тогда
		
		ВыполнитьКомандуСВыводомИнформации( "taskkill /f /im ""ras.exe""" );
		
	КонецЕсли;

	Приостановить(10000);

	Если ЗначениеЗаполнено( _ПараметрыРаботы.Параметры["Server1C.CNTX_PATH"] ) Тогда
		
		Попытка
			
			УдалитьФайлы( _ПараметрыРаботы.Параметры["Server1C.CNTX_PATH"], "snccntx*" );
			
		Исключение
			
			_Лог.Отладка( "Не удалось очистить папку " + _ПараметрыРаботы.Параметры["Server1C.CNTX_PATH"] );
			_Лог.Отладка( ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено( _ПараметрыРаботы.Параметры["Server1C.PFL_PATH"] ) Тогда
		
		Попытка
			
			УдалитьФайлы( _ПараметрыРаботы.Параметры["Server1C.PFL_PATH"], "*.pfl" );
			
		Исключение
			
			_Лог.Отладка( "Не удалось очистить папку " + _ПараметрыРаботы.Параметры["Server1C.PFL_PATH"] );
			_Лог.Отладка( ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено( _ПараметрыРаботы.Параметры["Server1C.TEMP_PATH"] ) Тогда
		
		Попытка
			
			УдалитьФайлы( _ПараметрыРаботы.Параметры["Server1C.TEMP_PATH"], "*.*" );
			
		Исключение
			
			_Лог.Отладка( "Не удалось очистить папку " + _ПараметрыРаботы.Параметры["Server1C.TEMP_PATH"] );
			_Лог.Отладка( ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;

	строкаЗапуска = "sc start """ + имяСервиса1С + """";
	
	ВыполнитьКомандуСВыводомИнформации( строкаЗапуска, "Старт серера 1С" );

	Если ЗначениеЗаполнено( имяСервисаRAS ) Тогда
		
		строкаЗапуска = "sc stop """ + имяСервисаRAS + """";
		
		ВыполнитьКомандуСВыводомИнформации( строкаЗапуска, "Старт RAS" );
		
	КонецЕсли;
		
	_Замер.СообщитьЗамер( "Выполнен ребут сервера 1С");

	Приостановить(10000);

КонецПроцедуры

Процедура ВыполнитьКомандуСВыводомИнформации( Знач пСтрокаЗапуска, Знач пОписаниеОперации = "" )
	
	Команда = Новый Команда;
	
	Если ЗначениеЗаполнено( пОписаниеОперации ) Тогда
		
		_Лог.Информация( пОписаниеОперации );
		
	КонецЕсли;
	
	_Лог.Информация( пСтрокаЗапуска );
	
	Команда.УстановитьСтрокуЗапуска( пСтрокаЗапуска );
	
	КодВозврата = Команда.Исполнить();	
	_Лог.Отладка( "Код возврата: " + КодВозврата );
	_Лог.Информация( Команда.ПолучитьВывод() );
	
КонецПроцедуры

Процедура ВключитьRAS()
	
	Если Не _ПараметрыРаботы.УдалятьСоединения() Тогда
		Возврат;
	КонецЕсли;

	Если _ПараметрыРаботы.ЭтоДинамическоеОбновление() Тогда
		Возврат;
	КонецЕсли;

	_Замер.НачатьЗамер( "Включение ras" );

	строкаЗапуска = _ПараметрыРаботы.Параметры["EXERAS"];

	Если ЗначениеЗаполнено( строкаЗапуска ) Тогда
		
		_Лог.Отладка( "Запуск RAS: " + строкаЗапуска + " cluster" );
		
		ЗапуститьПриложение( ОбщегоНазначения.ОбернутьВКавычки( строкаЗапуска ) + " cluster" );
		
		_Замер.СообщитьЗамер( "Включен ras");
		
	Иначе
		
		_Замер.СообщитьЗамер( "Запуск ras пропущен");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБлокировку()
	
	Если Не _ПараметрыРаботы.УдалятьСоединения() Тогда
		_Лог.Отладка( "Установка блокировки пропущена. УдалятьСоединения = Ложь" );
		Возврат;
	КонецЕсли;

	Если _ПараметрыРаботы.ЭтоДинамическоеОбновление() Тогда
		_Лог.Отладка( "Установка блокировки пропущена. ЭтоДинамическоеОбновление = Истина" );
		Возврат;
	КонецЕсли;

	_Замер.НачатьЗамер( "Установка блокировки для " + _ПараметрыРаботы.ПредставлениеБазы());

	ВывестиКоличествоАктивныхСеансов();
	
	_ПараметрыРаботы.ПараметрыДеплойки.Вставить("Действие", "lock");

	_УправлениеСеансами.ВыполнитьКоманду ( _ПараметрыРаботы.ПараметрыДеплойки );

	_Замер.СообщитьЗамер( "Установлена блокировка для " + _ПараметрыРаботы.ПредставлениеБазы() );
	
КонецПроцедуры

Процедура ВывестиКоличествоАктивныхСеансов()
	
	_Лог.Информация( "Сеансов: " + КоличествоАктивныхСеансов() );
КонецПроцедуры

Функция КоличествоАктивныхСеансов()
	_ПараметрыРаботы.ПараметрыДеплойки.Вставить("Действие", "unlock");
	Возврат _УправлениеСеансами.КоличествоСеансов( _ПараметрыРаботы.ПараметрыДеплойки );
КонецФункции

Процедура УдалитьСоединения()
	
	Если Не _ПараметрыРаботы.УдалятьСоединения() Тогда
		Возврат;
	КонецЕсли;

	Если _ПараметрыРаботы.ЭтоДинамическоеОбновление() Тогда
		Возврат;
	КонецЕсли;

	_Замер.НачатьЗамер( "Принудительное завершение работы пользователей для " + _ПараметрыРаботы.ПредставлениеБазы() );
	
	ВывестиКоличествоАктивныхСеансов();

	_ПараметрыРаботы.ПараметрыДеплойки.Вставить("Действие", "kill");
	_ПараметрыРаботы.ПараметрыДеплойки.Вставить("-lockstart", "");
	_ПараметрыРаботы.ПараметрыДеплойки.Вставить("-lockstartat", 0);
	
	Для ц = 1 По 5 Цикл
		
		Попытка
			
			_Лог.Отладка( "Удаление соединений, попытка " + ц);

			_УправлениеСеансами.ВыполнитьКоманду ( _ПараметрыРаботы.ПараметрыДеплойки );

			Если КоличествоАктивныхСеансов() = 0 Тогда
				Прервать;
			КонецЕсли;
			
		Исключение
			_Лог.Отладка( "Ошибка удаления соединений: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

	_Замер.СообщитьЗамер( "Работа пользователей завершена для " + _ПараметрыРаботы.ПредставлениеБазы() );

	ВывестиКоличествоАктивныхСеансов();
	
КонецПроцедуры

Процедура СнятьБлокировку()
	
	Если Не _ПараметрыРаботы.УдалятьСоединения() Тогда
		Возврат;
	КонецЕсли;

	Если _ПараметрыРаботы.ЭтоДинамическоеОбновление() Тогда
		Возврат;
	КонецЕсли;

	_Замер.НачатьЗамер( "Снятие блокировки для " + _ПараметрыРаботы.ПредставлениеБазы()  );	
	
	_ПараметрыРаботы.ПараметрыДеплойки.Вставить("Действие", "unlock");

	_УправлениеСеансами.ВыполнитьКоманду ( _ПараметрыРаботы.ПараметрыДеплойки );

	_Замер.СообщитьЗамер( "Блокировка снята для " + _ПараметрыРаботы.ПредставлениеБазы()  );

	ВывестиКоличествоАктивныхСеансов();
	
КонецПроцедуры

Процедура ПаузаПередУдалениемСеансов()
	
	Если Не _ПараметрыРаботы.УдалятьСоединения() Тогда
		Возврат;
	КонецЕсли;

	Если _ПараметрыРаботы.ЭтоДинамическоеОбновление() Тогда
		Возврат;
	КонецЕсли;
	
	Если _УправлениеСеансами.КоличествоСеансов( _ПараметрыРаботы.ПараметрыДеплойки ) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	_Замер.НачатьЗамер( "Пауза перед принудительным завершением работы для " + _ПараметрыРаботы.ПредставлениеБазы()  );
		
	всегоПаузаСекунд = 0;

	Если ЗначениеЗаполнено( _ПараметрыРаботы.Параметры["Cluster.lockstart"] ) Тогда

		всегоПаузаСекунд = _ПараметрыРаботы.Параметры["Cluster.lockstart"] - ТекущаяДата();

	ИначеЕсли ЗначениеЗаполнено( _ПараметрыРаботы.Параметры["Cluster.lockstartat"] ) Тогда

		всегоПаузаСекунд = _ПараметрыРаботы.Параметры["Cluster.lockstartat"];

	КонецЕсли;

	Если Не ЗначениеЗаполнено( всегоПаузаСекунд ) Тогда

		всегоПаузаСекунд = 0;

	ИначеЕсли всегоПаузаСекунд < 10 Тогда
		
		всегоПаузаСекунд = 10;

	Иначе
		всегоПаузаСекунд = всегоПаузаСекунд + 30;
	КонецЕсли;

	ПрогрессБарПаузы = Новый ПрогрессБар();
	ПрогрессБарПаузы.Начать(всегоПаузаСекунд, "Ожидание ", Ложь, Ложь, Ложь);
	
	Для ц = 0 По всегоПаузаСекунд Цикл
		
		ПрогрессБарПаузы.СделатьШаг();
		Приостановить(1000);
		
	КонецЦикла;
	ПрогрессБарПаузы.Завершить();
	
	_Замер.СообщитьЗамер( "Пауза завершена для " + _ПараметрыРаботы.ПредставлениеБазы()  );
	
КонецПроцедуры

Процедура ОбновитьКонфигурациюИзХранилища()
	
	Если Не _ПараметрыРаботы.ОбновлятьКонфигурацию() Тогда
		Возврат;
	КонецЕсли;
	
	Если _ПараметрыРаботы.Параметры["UseDynamicUpdate"] = Истина Тогда
		
		_Замер.НачатьЗамер( "Начало получения конфигурации из хранилища для " + _ПараметрыРаботы.ПредставлениеБазы()  );

		_Конфигуратор.ЗагрузитьКонфигурациюИзХранилища(_ПараметрыРаботы.Параметры["Repo.Connect"], _ПараметрыРаботы.Параметры["Repo.User"], _ПараметрыРаботы.Параметры["Repo.Password"] );
		Текст = _Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			_Лог.Информация(Текст);
		КонецЕсли;
		
		_Замер.СообщитьЗамер( "Конфигурация получена для " + _ПараметрыРаботы.ПредставлениеБазы()  );
		_Замер.НачатьЗамер( "Начало динамического обновления для " + _ПараметрыРаботы.ПредставлениеБазы()  );

		_Конфигуратор.ОбновитьКонфигурациюБазыДанных( ,, Истина );
		Текст = _Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			_Лог.Информация(Текст);
		КонецЕсли;
		
		_Замер.СообщитьЗамер( "Конфигурация обновлена для " + _ПараметрыРаботы.ПредставлениеБазы()  );

	Иначе
		
		_Замер.НачатьЗамер( "Начало обновления конфигурации из хранилища для " + _ПараметрыРаботы.ПредставлениеБазы()  );
		
		_Конфигуратор.ОбновитьКонфигурациюБазыДанныхИзХранилища(_ПараметрыРаботы.Параметры["Repo.Connect"], _ПараметрыРаботы.Параметры["Repo.User"], _ПараметрыРаботы.Параметры["Repo.Password"] );
		Текст = _Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			_Лог.Информация(Текст);
		КонецЕсли;
		
		_Замер.СообщитьЗамер( "Конфигурация обновлена для " + _ПараметрыРаботы.ПредставлениеБазы()  );
		
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьФайлЕслиСуществует( _Конфигуратор.ФайлИнформации() );
	
КонецПроцедуры

Процедура ЗапускМиграции()
	
	Если Не _ПараметрыРаботы.ОбновлятьКонфигурацию() Тогда
		Возврат;
	КонецЕсли;
	
	_Замер.НачатьЗамер( "Запуск миграции данных при обновлении для " + _ПараметрыРаботы.ПредставлениеБазы()  );
	
	Если Не ПустаяСтрока(_ПараметрыРаботы.Параметры["ExecuteEPF"]) Тогда
		ПутьОбработки1С = _ПараметрыРаботы.Параметры["ExecuteEPF"];	
		ДополнительныеКлючи = "/Execute " + ПутьОбработки1С;
	Иначе
		ДополнительныеКлючи = Неопределено;
	КонецЕсли;

	_Конфигуратор.ЗапуститьВРежимеПредприятия( _ПараметрыРаботы.Параметры["UpdateLaunchParameter"],,ДополнительныеКлючи);
	Текст = _Конфигуратор.ВыводКоманды();
	Если Не ПустаяСтрока(Текст) Тогда
		_Лог.Информация(Текст);
	КонецЕсли;
	ОбщегоНазначения.УдалитьФайлЕслиСуществует( _Конфигуратор.ФайлИнформации() );
	
	_Замер.СообщитьЗамер( "Миграция данных выполнена для " + _ПараметрыРаботы.ПредставлениеБазы()  );
	
КонецПроцедуры

Процедура Деплой()
		
	ВключитьRAS();
	
	Если _ПараметрыРаботы.РежимТестированияПараметров Тогда
		_Замер.СообщитьЗавершение();
		Возврат;
	КонецЕсли;
	
	УстановитьБлокировку();
	Попытка
		ПаузаПередУдалениемСеансов();
		УдалитьСоединения();
		ВыполнитьБекап();
		ПерезапуститьСервер();
		ОбновитьКонфигурациюИзХранилища();
		ЗапускМиграции();
		СнятьБлокировку();
	Исключение
		СнятьБлокировку();
		_Замер.СообщитьКритическуюОшибку( "Деплой провален" );
		_Замер.СообщитьКритическуюОшибку( ПодробноеПредставлениеОшибки( ИнформацияОбОшибке()) );
		ЗавершитьРаботу(1);
	КонецПопытки;
	
	_Замер.СообщитьЗавершение();
	
КонецПроцедуры

_Лог = Логирование.ПолучитьЛог(ИмяЛога());

_ПараметрыРаботы = Новый ПараметрыРаботы();
_ПараметрыРаботы.ИспользоватьДеплойку = Истина;

_ПараметрыРаботы.Инициализация( АргументыКоманднойСтроки, _Лог );

_Замер = _ПараметрыРаботы.Замер;
_УправлениеСеансами = _ПараметрыРаботы.УправлениеСеансами;
_Конфигуратор = _ПараметрыРаботы.Конфигуратор;

Деплой();